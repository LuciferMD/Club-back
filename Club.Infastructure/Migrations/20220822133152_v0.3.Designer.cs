// <auto-generated />
using System;
using Club.Infastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Club.Infastructure.Migrations
{
    [DbContext(typeof(ClubDBContext))]
    [Migration("20220822133152_v0.3")]
    partial class v03
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Club.Domain.Entities.Completed", b =>
                {
                    b.Property<Guid>("User_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Enter_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.HasKey("User_id", "Enter_id");

                    b.HasIndex("Enter_id");

                    b.ToTable("Completeds");
                });

            modelBuilder.Entity("Club.Domain.Entities.Entertainment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("Production_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("Rating")
                        .HasColumnType("double precision");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Entertainments");
                });

            modelBuilder.Entity("Club.Domain.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("Enter_id")
                        .HasColumnType("uuid");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<Guid>("User_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Enter_id");

                    b.HasIndex("User_id");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Club.Domain.Entities.Uncompleted", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("Enter_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("User_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Enter_id");

                    b.HasIndex("User_id");

                    b.ToTable("Uncompleteds");
                });

            modelBuilder.Entity("Club.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Login")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Club.Domain.Entities.UserInfo", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<int>("Number_books")
                        .HasColumnType("integer");

                    b.Property<int>("Number_films")
                        .HasColumnType("integer");

                    b.Property<Guid>("User_id")
                        .HasColumnType("uuid");

                    b.ToTable("UserInfo");
                });

            modelBuilder.Entity("Club.Domain.Entities.Completed", b =>
                {
                    b.HasOne("Club.Domain.Entities.Entertainment", "Entertainment")
                        .WithMany("Commpleteds")
                        .HasForeignKey("Enter_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Club.Domain.Entities.User", "User")
                        .WithMany("Commpleteds")
                        .HasForeignKey("User_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entertainment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Club.Domain.Entities.Review", b =>
                {
                    b.HasOne("Club.Domain.Entities.Entertainment", "Entertainment")
                        .WithMany("Reviews")
                        .HasForeignKey("Enter_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Club.Domain.Entities.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("User_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entertainment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Club.Domain.Entities.Uncompleted", b =>
                {
                    b.HasOne("Club.Domain.Entities.Entertainment", "Entertainment")
                        .WithMany("Uncommpleteds")
                        .HasForeignKey("Enter_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Club.Domain.Entities.User", "User")
                        .WithMany("Uncommpleteds")
                        .HasForeignKey("User_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entertainment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Club.Domain.Entities.Entertainment", b =>
                {
                    b.Navigation("Commpleteds");

                    b.Navigation("Reviews");

                    b.Navigation("Uncommpleteds");
                });

            modelBuilder.Entity("Club.Domain.Entities.User", b =>
                {
                    b.Navigation("Commpleteds");

                    b.Navigation("Reviews");

                    b.Navigation("Uncommpleteds");
                });
#pragma warning restore 612, 618
        }
    }
}
